---
Test
---
!2 Password Definition in RADIUS Authentication Request
In this page are collected Access Request examples supported by RADIUS Server Mock. Access Request examples  explained here are:
 * Anonymous User (no-password)
 * Plain Text
 * PAP Protocol
 * CHAP Protocol

!3 Anonymous User
RADIUS Server Mock supports Anonymous users. Username should be provided via the ''User-Name'' attribute.

|ddt           :radius client fixture|${RADIUS_HOST}|${RADIUS_AUTH_PORT}|${RADIUS_SHARED_SECRET}|
|packet type   |User-Name            |packet type name?                                         |
|Authentication|anon                 |Access-Accept                                             |

!3 Plain Text
RADIUS Server Mock supports Plain Text passwords. Username should be provided via the ''User-Name'' attribute and password via the ''User-Password'' attribute.

|ddt           :radius client fixture|${RADIUS_HOST}|${RADIUS_AUTH_PORT}|${RADIUS_SHARED_SECRET}|
|packet type   |User-Name            |User-Password |packet type name?                          |
|Authentication|user001              |password001   |Access-Accept                              |
|Authentication|user001              |wrongPassword |Access-Reject                              |
|Authentication|wrongUser            |password001   |Access-Reject                              |

!3 PAP Protocol
RADIUS Server Mock supports PAP Protocol passwords. Username should be provided via the ''User-Name'' attribute and password via the ''User-Password'' attribute.
PAP passwords are built against ''request authenticator'' and ''shared secret''. When not defined, the ''request authenticator'' is randomly created so, to set access credentials this way, a fixed ''request authenticator'' need to be set.

|ddt           :radius client fixture             |${RADIUS_HOST}|${RADIUS_AUTH_PORT}               |${RADIUS_SHARED_SECRET}|
|packet type   |request authenticator             |User-Name     |User-Password                     |packet type name?      |
|Authentication|0x000102030405060708900a0b0c0d0e0f|user001       |0xa4bdb6ae9d8c1819c2152fc47bb1965d|Access-Accept          |
|Authentication|0x000102030405060708900a0b0c0d0e0f|user001       |0xa0000000000000000000000000000001|Access-Reject          |
|Authentication|0x000102030405060708900a0b0c0d0e0f|wrongUser     |0xa4bdb6ae9d8c1819c2152fc47bb1965d|Access-Reject          |

To use randomly created ''request authenticator'' and plain text paswords, just use the utility method ''set auth pap password''.

|ddt           :radius client fixture|${RADIUS_HOST}   |${RADIUS_AUTH_PORT}|${RADIUS_SHARED_SECRET}|
|packet type   |User-Name            |auth pap password|packet type name?                          |
|Authentication|user001              |password001      |Access-Accept                              |
|Authentication|user001              |wrongPassword    |Access-Reject                              |
|Authentication|wrongUser            |password001      |Access-Reject                              |

!3 PAP Protocol
RADIUS Server Mock supports CHAP Protocol passwords. Username should be provided via the ''User-Name'' attribute, password via the ''CHAP-Password'' attribute and challange via the ''CHAP-Challange'' attribute.
CHAP passwords are built against ''CHAP-Challenge'' attribute. When not defined, the ''CHAP-Challenge'' attribute is randomly created so, to set access credentials this way, a fixed ''CHAP-Challange'' attribute need to be set.

|ddt           :radius client fixture             |${RADIUS_HOST}|${RADIUS_AUTH_PORT}                 |${RADIUS_SHARED_SECRET}|
|packet type   |CHAP-Challenge                    |User-Name     |CHAP-Password                       |packet type name?      |
|Authentication|0x79e33e7957fa907665ad630318cefbbd|user001       |0x02f9dd92e2c4bb53c0a262159fe5d2e4b0|Access-Accept          |
|Authentication|0x79e33e7957fa907665ad630318cefbbd|user001       |0x0000000000000000000000000000000001|Access-Reject          |
|Authentication|0x79e33e7957fa907665ad630318cefbbd|wrongUser     |0x02f9dd92e2c4bb53c0a262159fe5d2e4b0|Access-Reject          |
|Authentication|0x00000000000000000000000000000001|user001       |0x02f9dd92e2c4bb53c0a262159fe5d2e4b0|Access-Reject          |

To use randomly created ''CHAP-Challange'' attribute and plain text paswords, just use the utility method ''set auth chap password''.

|ddt           :radius client fixture|${RADIUS_HOST}    |${RADIUS_AUTH_PORT}|${RADIUS_SHARED_SECRET}|
|packet type   |User-Name            |auth chap password|packet type name?                          |
|Authentication|user001              |password001       |Access-Accept                              |
|Authentication|user001              |wrongPassword     |Access-Reject                              |
|Authentication|wrongUser            |password001       |Access-Reject                              |
